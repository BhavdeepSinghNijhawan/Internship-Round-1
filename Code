#include <iostream>
#include <regex>
#include <vector>
#include <string>

std::vector<std::string> validate_html(const std::string& html_code) {
    std::vector<std::string> errors;

    // Check if HTML code contains a <title> tag
    if (!std::regex_search(html_code, std::regex("<title>.*?</title>", std::regex_constants::icase))) {
        errors.push_back("Missing <title> tag");
    }

    // Check if HTML code contains a <meta charset> tag
    if (!std::regex_search(html_code, std::regex("<meta\\s+charset\\s*=\\s*[\"']utf-8[\"']\\s*/?>", std::regex_constants::icase))) {
        errors.push_back("Missing <meta charset='utf-8'> tag");
    }

    // Check if HTML code contains a <meta name="description"> tag
    if (!std::regex_search(html_code, std::regex("<meta\\s+name\\s*=\\s*[\"']description[\"']\\s+content\\s*=\\s*[\"'][^\"]*?[\"']\\s*/?>", std::regex_constants::icase))) {
        errors.push_back("Missing <meta name='description'> tag");
    }

    // Check if HTML code contains a <meta name="keywords"> tag
    if (!std::regex_search(html_code, std::regex("<meta\\s+name\\s*=\\s*[\"']keywords[\"']\\s+content\\s*=\\s*[\"'][^\"]*?[\"']\\s*/?>", std::regex_constants::icase))) {
        errors.push_back("Missing <meta name='keywords'> tag");
    }

    // Check if HTML code contains a <link rel="stylesheet"> tag
    if (!std::regex_search(html_code, std::regex("<link\\s+rel\\s*=\\s*[\"']stylesheet[\"']\\s+href\\s*=\\s*[\"'][^\"]*?[\"']\\s*/?>", std::regex_constants::icase))) {
        errors.push_back("Missing <link rel='stylesheet'> tag");
    }

    return errors;
}

std::vector<std::string> validate_css(const std::string& css_code) {
    std::vector<std::string> errors;

    // Check if CSS code contains at least one rule
    if (!std::regex_search(css_code, std::regex("\\w+\\s*\\{.*?\\}"))) {
        errors.push_back("No CSS rules found");
    }

    return errors;
}

std::vector<std::string> validate_js(const std::string& js_code) {
    std::vector<std::string> errors;

    // Check if JavaScript code contains at least one function
    if (!std::regex_search(js_code, std::regex("function\\s+\\w+\\s*\\(\\)"))) {
        errors.push_back("No JavaScript functions found");
    }

    return errors;
}

int main() {
    // Example HTML, CSS, and JavaScript code
    std::string html_code = R"(
        <html>
        <head>
            <title>Sample Page</title>
            <meta charset='utf-8'>
            <meta name='description' content='Sample Description'>
            <meta name='keywords' content='sample, keywords'>
            <link rel='stylesheet' href='styles.css'>
        </head>
        <body>
            <h1>Hello, World!</h1>
        </body>
        </html>
    )";
    std::string css_code = R"(
        body {
            font-family: Arial, sans-serif;
        }
        h1 {
            color: blue;
        }
    )";
    std::string js_code = R"(
        function showMessage() {
            alert('Hello, World!');
        }
    )";
    // Validate HTML, CSS, and JavaScript code
    std::vector<std::string> html_errors = validate_html(html_code);
    std::vector<std::string> css_errors = validate_css(css_code);
    std::vector<std::string> js_errors = validate_js(js_code);
    // Print validation results
    std::cout << "HTML Errors:" << std::endl;
    for (const auto& error : html_errors) {
        std::cout << "- " << error << std::endl;
    }
    std::cout << "\nCSS Errors:" << std::endl;
    for (const auto& error : css_errors) {
        std::cout << "- " << error << std::endl;
    }
    std::cout << "\nJavaScript Errors:" << std::endl;
    for (const auto& error : js_errors) {
        std::cout << "- " << error << std::endl;
    }
    return 0;
}
